module Snow

from "runtime/dataStructures" include DataStructures
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmi64" include WasmI64
from "runtime/unsafe/wasmf32" include WasmF32
from "runtime/unsafe/wasmf64" include WasmF64
from "runtime/unsafe/memory" include Memory
from "int32" include Int32
from "int64" include Int64
from "char" include Char
from "list" include List

@unsafe
provide let cabi_realloc = (originalPtr: WasmI32, originalSize: WasmI32, alignment: WasmI32, newSize: WasmI32) => {
  if (WasmI32.eqz(originalPtr)) {
    Memory.malloc(newSize)
  } else {
    let newPtr = Memory.malloc(newSize)
    let amt = if (WasmI32.(<)(originalSize, newSize)) originalSize else newSize
    Memory.copy(newPtr, originalPtr, amt)
    Memory.free(originalPtr)
    newPtr
  }
}

provide record Resource<a> {
  mut handle: Int32,
  rep: a
}



provide module Host {

  @externalName("multiply")
  foreign wasm wit_bindgen_multiply: (WasmF32, WasmF32) => WasmF32 from "snow:host/host@0.0.1"

  @unsafe
  provide let multiply: (Float32, Float32) => Float32 = (a, b) => {
    let ret = wit_bindgen_multiply(WasmF32.load(WasmI32.fromGrain(a), 4n), WasmF32.load(WasmI32.fromGrain(b), 4n))
    WasmI32.toGrain(DataStructures.newFloat32(ret)): Float32
  }

}

