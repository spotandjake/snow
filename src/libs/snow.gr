module Snow

from "runtime/dataStructures" include DataStructures
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmi64" include WasmI64
from "runtime/unsafe/wasmf32" include WasmF32
from "runtime/unsafe/wasmf64" include WasmF64
from "runtime/unsafe/memory" include Memory
from "int32" include Int32
from "int64" include Int64
from "char" include Char
from "list" include List

@unsafe
let _RET_AREA = Memory.malloc(32n)

@unsafe
provide let cabi_realloc = (originalPtr: WasmI32, originalSize: WasmI32, alignment: WasmI32, newSize: WasmI32) => {
  if (WasmI32.eqz(originalPtr)) {
    Memory.malloc(newSize)
  } else {
    let newPtr = Memory.malloc(newSize)
    let amt = if (WasmI32.(<)(originalSize, newSize)) originalSize else newSize
    Memory.copy(newPtr, originalPtr, amt)
    Memory.free(originalPtr)
    newPtr
  }
}

provide record Resource<a> {
  mut handle: Int32,
  rep: a
}

provide record AttributePathValue {
  handle: Int32
}
provide record Inherit {
  handle: Int32
}
provide enum Entry {
  AttributePathValue(AttributePathValue),
  Inherit(Inherit),
}
provide enum UnaryOperator {
  Invert,
  Negate,
}
provide enum BinaryOperator {
  Concat,
  Update,
  Add,
  Sub,
  Mul,
  Div,
  And,
  Equal,
  Implication,
  Less,
  LessOrEq,
  More,
  MoreOrEq,
  NotEqual,
  Or,
}
provide record Select {
  handle: Int32
}
provide record Assert {
  handle: Int32
}
provide record BinaryOperation {
  handle: Int32
}
provide record Error {
  handle: Int32
}
provide record Function {
  handle: Int32
}
provide record FunctionApplication {
  handle: Int32
}
provide record HasAttribute {
  handle: Int32
}
provide record Identifier {
  handle: Int32
}
provide record IfThenElse {
  handle: Int32
}
provide record LetIn {
  handle: Int32
}
provide record ListNode {
  handle: Int32
}
provide record Path {
  handle: Int32
}
provide record NixString {
  handle: Int32
}
provide enum Literal {
  Float(Float64),
  Integer(Int64),
  Uri,
}
provide record UnaryOperation {
  handle: Int32
}
provide record NixWith {
  handle: Int32
}
provide record Root {
  handle: Int32
}
provide record AttributeSet {
  handle: Int32
}
provide enum Expression {
  Select(Select),
  Assert(Assert),
  BinaryOperation(BinaryOperation),
  Error(Error),
  Function(Function),
  FunctionApplication(FunctionApplication),
  HasAttribute(HasAttribute),
  Identifier(Identifier),
  IfThenElse(IfThenElse),
  LetIn(LetIn),
  List(ListNode),
  Path(Path),
  String(NixString),
  Literal(Literal),
  UnaryOperation(UnaryOperation),
  With(NixWith),
  Root(Root),
  AttributeSet(AttributeSet),
}
provide enum Attr {
  Str(String),
  Ident(Identifier),
  Dynamic(Expression),
}
provide enum StringPart {
  Raw(String),
  Dynamic(Expression),
}


provide module Nix {

  @externalName("parse")
  foreign wasm wit_bindgen_parse: (WasmI32, WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

  @unsafe
  provide let parse: (String) => Result<Expression, String> = (nixSource) => {
    let vec_list_canon_lower = nixSource
    let ptr_list_canon_lower = WasmI32.(+)(WasmI32.fromGrain(vec_list_canon_lower), 8n)
    let len_list_canon_lower = WasmI32.load(WasmI32.fromGrain(vec_list_canon_lower), 4n)
    wit_bindgen_parse(ptr_list_canon_lower, len_list_canon_lower, _RET_AREA)
    match (WasmI32.load8U(_RET_AREA, 0n)) {
      0n => {
        
        Ok(match (WasmI32.load8U(_RET_AREA, 8n)) {
          0n => {
            let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Select
            Select(handle_lift)
          },
          1n => {
            let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Assert
            Assert(handle_lift0)
          },
          2n => {
            let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: BinaryOperation
            BinaryOperation(handle_lift1)
          },
          3n => {
            let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Error
            Error(handle_lift2)
          },
          4n => {
            let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Function
            Function(handle_lift3)
          },
          5n => {
            let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: FunctionApplication
            FunctionApplication(handle_lift4)
          },
          6n => {
            let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: HasAttribute
            HasAttribute(handle_lift5)
          },
          7n => {
            let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Identifier
            Identifier(handle_lift6)
          },
          8n => {
            let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: IfThenElse
            IfThenElse(handle_lift7)
          },
          9n => {
            let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: LetIn
            LetIn(handle_lift8)
          },
          10n => {
            let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: ListNode
            List(handle_lift9)
          },
          11n => {
            let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Path
            Path(handle_lift10)
          },
          12n => {
            let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: NixString
            String(handle_lift11)
          },
          13n => {
            Literal(match (WasmI32.load8U(_RET_AREA, 16n)) {
              0n => {
                Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 24n))): Float64)
              },
              1n => {
                Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 24n))): Int64)
              },
              _ => {
                Uri
              },
            })
          },
          14n => {
            let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: UnaryOperation
            UnaryOperation(handle_lift12)
          },
          15n => {
            let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: NixWith
            With(handle_lift13)
          },
          16n => {
            let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Root
            Root(handle_lift14)
          },
          _ => {
            let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: AttributeSet
            AttributeSet(handle_lift15)
          },
        })
      },
      1n => {
        let len_string_lift = WasmI32.load(_RET_AREA, 12n)
        let str_string_lift = DataStructures.allocateString(len_string_lift)
        Memory.copy(WasmI32.(+)(str_string_lift, 8n), WasmI32.load(_RET_AREA, 8n), len_string_lift)
        let str_string_lift = WasmI32.toGrain(str_string_lift): String

        Err(str_string_lift)
      },
      _ => fail "invalid enum discriminant",
    }
  }


  provide module AttributePathValue {
    @externalName("[method]attribute-path-value.get-attr-list")
    foreign wasm wit_bindgen_methodAttributePathValue_getAttrList: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getAttrList: (AttributePathValue) => List<Attr> = (self) => {
      wit_bindgen_methodAttributePathValue_getAttrList(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      let base_list_lift = WasmI32.load(_RET_AREA, 0n)
      let len_list_lift = WasmI32.load(_RET_AREA, 4n)
      let mut result_list_lift = []
      Memory.incRef(WasmI32.fromGrain(result_list_lift))
      for (let mut i = WasmI32.(-)(len_list_lift, 1n); WasmI32.(!=)(i, -1n); i = WasmI32.(-)(i, 1n)) {
        let base = WasmI32.(+)(base_list_lift, WasmI32.(*)(i, 32n))
        result_list_lift = [match (WasmI32.load8U(base, 0n)) {
          0n => {
            let len_string_lift = WasmI32.load(base, 12n)
            let str_string_lift = DataStructures.allocateString(len_string_lift)
            Memory.copy(WasmI32.(+)(str_string_lift, 8n), WasmI32.load(base, 8n), len_string_lift)
            let str_string_lift = WasmI32.toGrain(str_string_lift): String
            Str(str_string_lift)
          },
          1n => {
            let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: Identifier
            Ident(handle_lift)
          },
          _ => {
            Dynamic(match (WasmI32.load8U(base, 8n)) {
              0n => {
                let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Select
                Select(handle_lift0)
              },
              1n => {
                let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Assert
                Assert(handle_lift1)
              },
              2n => {
                let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: BinaryOperation
                BinaryOperation(handle_lift2)
              },
              3n => {
                let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Error
                Error(handle_lift3)
              },
              4n => {
                let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Function
                Function(handle_lift4)
              },
              5n => {
                let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: FunctionApplication
                FunctionApplication(handle_lift5)
              },
              6n => {
                let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: HasAttribute
                HasAttribute(handle_lift6)
              },
              7n => {
                let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Identifier
                Identifier(handle_lift7)
              },
              8n => {
                let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: IfThenElse
                IfThenElse(handle_lift8)
              },
              9n => {
                let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: LetIn
                LetIn(handle_lift9)
              },
              10n => {
                let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: ListNode
                List(handle_lift10)
              },
              11n => {
                let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Path
                Path(handle_lift11)
              },
              12n => {
                let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: NixString
                String(handle_lift12)
              },
              13n => {
                Literal(match (WasmI32.load8U(base, 16n)) {
                  0n => {
                    Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(base, 24n))): Float64)
                  },
                  1n => {
                    Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(base, 24n))): Int64)
                  },
                  _ => {
                    Uri
                  },
                })
              },
              14n => {
                let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: UnaryOperation
                UnaryOperation(handle_lift13)
              },
              15n => {
                let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: NixWith
                With(handle_lift14)
              },
              16n => {
                let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Root
                Root(handle_lift15)
              },
              _ => {
                let handle_lift16 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: AttributeSet
                AttributeSet(handle_lift16)
              },
            })
          },
        }, ...result_list_lift]
      }
      result_list_lift
    }


    @externalName("[method]attribute-path-value.get-expr")
    foreign wasm wit_bindgen_methodAttributePathValue_getExpr: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getExpr: (AttributePathValue) => Expression = (self) => {
      wit_bindgen_methodAttributePathValue_getExpr(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }

  }

  provide module Inherit {
    @externalName("[method]inherit.get-expr-from")
    foreign wasm wit_bindgen_methodInherit_getExprFrom: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getExprFrom: (Inherit) => Option<Expression> = (self) => {
      wit_bindgen_methodInherit_getExprFrom(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => None,
        1n => {
          
          Some(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Select
              Select(handle_lift)
            },
            1n => {
              let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Assert
              Assert(handle_lift0)
            },
            2n => {
              let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: BinaryOperation
              BinaryOperation(handle_lift1)
            },
            3n => {
              let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Error
              Error(handle_lift2)
            },
            4n => {
              let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Function
              Function(handle_lift3)
            },
            5n => {
              let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: FunctionApplication
              FunctionApplication(handle_lift4)
            },
            6n => {
              let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: HasAttribute
              HasAttribute(handle_lift5)
            },
            7n => {
              let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Identifier
              Identifier(handle_lift6)
            },
            8n => {
              let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: IfThenElse
              IfThenElse(handle_lift7)
            },
            9n => {
              let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: LetIn
              LetIn(handle_lift8)
            },
            10n => {
              let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: ListNode
              List(handle_lift9)
            },
            11n => {
              let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Path
              Path(handle_lift10)
            },
            12n => {
              let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: NixString
              String(handle_lift11)
            },
            13n => {
              Literal(match (WasmI32.load8U(_RET_AREA, 16n)) {
                0n => {
                  Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 24n))): Float64)
                },
                1n => {
                  Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 24n))): Int64)
                },
                _ => {
                  Uri
                },
              })
            },
            14n => {
              let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: UnaryOperation
              UnaryOperation(handle_lift12)
            },
            15n => {
              let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: NixWith
              With(handle_lift13)
            },
            16n => {
              let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Root
              Root(handle_lift14)
            },
            _ => {
              let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: AttributeSet
              AttributeSet(handle_lift15)
            },
          })
        },
        _ => fail "invalid enum discriminant",
      }
    }


    @externalName("[method]inherit.get-attr-list")
    foreign wasm wit_bindgen_methodInherit_getAttrList: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getAttrList: (Inherit) => List<Attr> = (self) => {
      wit_bindgen_methodInherit_getAttrList(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      let base_list_lift = WasmI32.load(_RET_AREA, 0n)
      let len_list_lift = WasmI32.load(_RET_AREA, 4n)
      let mut result_list_lift = []
      Memory.incRef(WasmI32.fromGrain(result_list_lift))
      for (let mut i = WasmI32.(-)(len_list_lift, 1n); WasmI32.(!=)(i, -1n); i = WasmI32.(-)(i, 1n)) {
        let base = WasmI32.(+)(base_list_lift, WasmI32.(*)(i, 32n))
        result_list_lift = [match (WasmI32.load8U(base, 0n)) {
          0n => {
            let len_string_lift = WasmI32.load(base, 12n)
            let str_string_lift = DataStructures.allocateString(len_string_lift)
            Memory.copy(WasmI32.(+)(str_string_lift, 8n), WasmI32.load(base, 8n), len_string_lift)
            let str_string_lift = WasmI32.toGrain(str_string_lift): String
            Str(str_string_lift)
          },
          1n => {
            let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: Identifier
            Ident(handle_lift)
          },
          _ => {
            Dynamic(match (WasmI32.load8U(base, 8n)) {
              0n => {
                let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Select
                Select(handle_lift0)
              },
              1n => {
                let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Assert
                Assert(handle_lift1)
              },
              2n => {
                let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: BinaryOperation
                BinaryOperation(handle_lift2)
              },
              3n => {
                let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Error
                Error(handle_lift3)
              },
              4n => {
                let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Function
                Function(handle_lift4)
              },
              5n => {
                let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: FunctionApplication
                FunctionApplication(handle_lift5)
              },
              6n => {
                let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: HasAttribute
                HasAttribute(handle_lift6)
              },
              7n => {
                let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Identifier
                Identifier(handle_lift7)
              },
              8n => {
                let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: IfThenElse
                IfThenElse(handle_lift8)
              },
              9n => {
                let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: LetIn
                LetIn(handle_lift9)
              },
              10n => {
                let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: ListNode
                List(handle_lift10)
              },
              11n => {
                let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Path
                Path(handle_lift11)
              },
              12n => {
                let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: NixString
                String(handle_lift12)
              },
              13n => {
                Literal(match (WasmI32.load8U(base, 16n)) {
                  0n => {
                    Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(base, 24n))): Float64)
                  },
                  1n => {
                    Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(base, 24n))): Int64)
                  },
                  _ => {
                    Uri
                  },
                })
              },
              14n => {
                let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: UnaryOperation
                UnaryOperation(handle_lift13)
              },
              15n => {
                let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: NixWith
                With(handle_lift14)
              },
              16n => {
                let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Root
                Root(handle_lift15)
              },
              _ => {
                let handle_lift16 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: AttributeSet
                AttributeSet(handle_lift16)
              },
            })
          },
        }, ...result_list_lift]
      }
      result_list_lift
    }

  }

  provide module Select {
    @externalName("[method]select.get-base-expr")
    foreign wasm wit_bindgen_methodSelect_getBaseExpr: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getBaseExpr: (Select) => Expression = (self) => {
      wit_bindgen_methodSelect_getBaseExpr(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }


    @externalName("[method]select.get-default-expr")
    foreign wasm wit_bindgen_methodSelect_getDefaultExpr: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getDefaultExpr: (Select) => Option<Expression> = (self) => {
      wit_bindgen_methodSelect_getDefaultExpr(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => None,
        1n => {
          
          Some(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Select
              Select(handle_lift)
            },
            1n => {
              let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Assert
              Assert(handle_lift0)
            },
            2n => {
              let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: BinaryOperation
              BinaryOperation(handle_lift1)
            },
            3n => {
              let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Error
              Error(handle_lift2)
            },
            4n => {
              let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Function
              Function(handle_lift3)
            },
            5n => {
              let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: FunctionApplication
              FunctionApplication(handle_lift4)
            },
            6n => {
              let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: HasAttribute
              HasAttribute(handle_lift5)
            },
            7n => {
              let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Identifier
              Identifier(handle_lift6)
            },
            8n => {
              let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: IfThenElse
              IfThenElse(handle_lift7)
            },
            9n => {
              let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: LetIn
              LetIn(handle_lift8)
            },
            10n => {
              let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: ListNode
              List(handle_lift9)
            },
            11n => {
              let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Path
              Path(handle_lift10)
            },
            12n => {
              let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: NixString
              String(handle_lift11)
            },
            13n => {
              Literal(match (WasmI32.load8U(_RET_AREA, 16n)) {
                0n => {
                  Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 24n))): Float64)
                },
                1n => {
                  Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 24n))): Int64)
                },
                _ => {
                  Uri
                },
              })
            },
            14n => {
              let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: UnaryOperation
              UnaryOperation(handle_lift12)
            },
            15n => {
              let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: NixWith
              With(handle_lift13)
            },
            16n => {
              let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: Root
              Root(handle_lift14)
            },
            _ => {
              let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 16n))),}: AttributeSet
              AttributeSet(handle_lift15)
            },
          })
        },
        _ => fail "invalid enum discriminant",
      }
    }

  }

  provide module Assert {
    @externalName("[method]assert.get-expr")
    foreign wasm wit_bindgen_methodAssert_getExpr: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getExpr: (Assert) => Expression = (self) => {
      wit_bindgen_methodAssert_getExpr(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }


    @externalName("[method]assert.get-condition")
    foreign wasm wit_bindgen_methodAssert_getCondition: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getCondition: (Assert) => Expression = (self) => {
      wit_bindgen_methodAssert_getCondition(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }

  }

  provide module BinaryOperation {
    @externalName("[method]binary-operation.get-lhs")
    foreign wasm wit_bindgen_methodBinaryOperation_getLhs: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getLhs: (BinaryOperation) => Expression = (self) => {
      wit_bindgen_methodBinaryOperation_getLhs(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }


    @externalName("[method]binary-operation.get-operator")
    foreign wasm wit_bindgen_methodBinaryOperation_getOperator: (WasmI32) => WasmI32 from "spotandjake:snow/nix"

    @unsafe
    provide let getOperator: (BinaryOperation) => BinaryOperator = (self) => {
      let ret = wit_bindgen_methodBinaryOperation_getOperator(WasmI32.load(WasmI32.fromGrain(self.handle), 4n))
      match (ret) {
        0n => {
          Concat
        },
        1n => {
          Update
        },
        2n => {
          Add
        },
        3n => {
          Sub
        },
        4n => {
          Mul
        },
        5n => {
          Div
        },
        6n => {
          And
        },
        7n => {
          Equal
        },
        8n => {
          Implication
        },
        9n => {
          Less
        },
        10n => {
          LessOrEq
        },
        11n => {
          More
        },
        12n => {
          MoreOrEq
        },
        13n => {
          NotEqual
        },
        _ => {
          Or
        },
      }
    }


    @externalName("[method]binary-operation.get-rhs")
    foreign wasm wit_bindgen_methodBinaryOperation_getRhs: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getRhs: (BinaryOperation) => Expression = (self) => {
      wit_bindgen_methodBinaryOperation_getRhs(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }

  }

  provide module Error {
    @externalName("[method]error.get-message")
    foreign wasm wit_bindgen_methodError_getMessage: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getMessage: (Error) => String = (self) => {
      wit_bindgen_methodError_getMessage(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      let len_string_lift = WasmI32.load(_RET_AREA, 4n)
      let str_string_lift = DataStructures.allocateString(len_string_lift)
      Memory.copy(WasmI32.(+)(str_string_lift, 8n), WasmI32.load(_RET_AREA, 0n), len_string_lift)
      let str_string_lift = WasmI32.toGrain(str_string_lift): String
      str_string_lift
    }

  }

  provide module Function {
    @externalName("[method]function.get-body")
    foreign wasm wit_bindgen_methodFunction_getBody: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    /// get-param: func() -> param;
    @unsafe
    provide let getBody: (Function) => Expression = (self) => {
      wit_bindgen_methodFunction_getBody(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }

  }

  provide module FunctionApplication {
    @externalName("[method]function-application.get-function")
    foreign wasm wit_bindgen_methodFunctionApplication_getFunction: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getFunction: (FunctionApplication) => Expression = (self) => {
      wit_bindgen_methodFunctionApplication_getFunction(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }


    @externalName("[method]function-application.get-argument")
    foreign wasm wit_bindgen_methodFunctionApplication_getArgument: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getArgument: (FunctionApplication) => Expression = (self) => {
      wit_bindgen_methodFunctionApplication_getArgument(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }

  }

  provide module HasAttribute {
    @externalName("[method]has-attribute.get-expr")
    foreign wasm wit_bindgen_methodHasAttribute_getExpr: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getExpr: (HasAttribute) => Expression = (self) => {
      wit_bindgen_methodHasAttribute_getExpr(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }

  }

  provide module Identifier {
    @externalName("[method]identifier.get-id")
    foreign wasm wit_bindgen_methodIdentifier_getId: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getId: (Identifier) => String = (self) => {
      wit_bindgen_methodIdentifier_getId(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      let len_string_lift = WasmI32.load(_RET_AREA, 4n)
      let str_string_lift = DataStructures.allocateString(len_string_lift)
      Memory.copy(WasmI32.(+)(str_string_lift, 8n), WasmI32.load(_RET_AREA, 0n), len_string_lift)
      let str_string_lift = WasmI32.toGrain(str_string_lift): String
      str_string_lift
    }

  }

  provide module IfThenElse {
    @externalName("[method]if-then-else.get-condition")
    foreign wasm wit_bindgen_methodIfThenElse_getCondition: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getCondition: (IfThenElse) => Expression = (self) => {
      wit_bindgen_methodIfThenElse_getCondition(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }


    @externalName("[method]if-then-else.get-true-branch")
    foreign wasm wit_bindgen_methodIfThenElse_getTrueBranch: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getTrueBranch: (IfThenElse) => Expression = (self) => {
      wit_bindgen_methodIfThenElse_getTrueBranch(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }


    @externalName("[method]if-then-else.get-false-branch")
    foreign wasm wit_bindgen_methodIfThenElse_getFalseBranch: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getFalseBranch: (IfThenElse) => Expression = (self) => {
      wit_bindgen_methodIfThenElse_getFalseBranch(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }

  }

  provide module LetIn {
    @externalName("[method]let-in.get-binds")
    foreign wasm wit_bindgen_methodLetIn_getBinds: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getBinds: (LetIn) => List<Entry> = (self) => {
      wit_bindgen_methodLetIn_getBinds(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      let base_list_lift = WasmI32.load(_RET_AREA, 0n)
      let len_list_lift = WasmI32.load(_RET_AREA, 4n)
      let mut result_list_lift = []
      Memory.incRef(WasmI32.fromGrain(result_list_lift))
      for (let mut i = WasmI32.(-)(len_list_lift, 1n); WasmI32.(!=)(i, -1n); i = WasmI32.(-)(i, 1n)) {
        let base = WasmI32.(+)(base_list_lift, WasmI32.(*)(i, 8n))
        result_list_lift = [match (WasmI32.load8U(base, 0n)) {
          0n => {
            let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 4n))),}: AttributePathValue
            AttributePathValue(handle_lift)
          },
          _ => {
            let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 4n))),}: Inherit
            Inherit(handle_lift0)
          },
        }, ...result_list_lift]
      }
      result_list_lift
    }


    @externalName("[method]let-in.get-body")
    foreign wasm wit_bindgen_methodLetIn_getBody: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getBody: (LetIn) => Expression = (self) => {
      wit_bindgen_methodLetIn_getBody(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }

  }

  provide module ListNode {
    @externalName("[method]list-node.get-elements")
    foreign wasm wit_bindgen_methodListNode_getElements: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getElements: (ListNode) => List<Expression> = (self) => {
      wit_bindgen_methodListNode_getElements(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      let base_list_lift = WasmI32.load(_RET_AREA, 0n)
      let len_list_lift = WasmI32.load(_RET_AREA, 4n)
      let mut result_list_lift = []
      Memory.incRef(WasmI32.fromGrain(result_list_lift))
      for (let mut i = WasmI32.(-)(len_list_lift, 1n); WasmI32.(!=)(i, -1n); i = WasmI32.(-)(i, 1n)) {
        let base = WasmI32.(+)(base_list_lift, WasmI32.(*)(i, 24n))
        result_list_lift = [match (WasmI32.load8U(base, 0n)) {
          0n => {
            let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: Select
            Select(handle_lift)
          },
          1n => {
            let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: Assert
            Assert(handle_lift0)
          },
          2n => {
            let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: BinaryOperation
            BinaryOperation(handle_lift1)
          },
          3n => {
            let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: Error
            Error(handle_lift2)
          },
          4n => {
            let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: Function
            Function(handle_lift3)
          },
          5n => {
            let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: FunctionApplication
            FunctionApplication(handle_lift4)
          },
          6n => {
            let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: HasAttribute
            HasAttribute(handle_lift5)
          },
          7n => {
            let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: Identifier
            Identifier(handle_lift6)
          },
          8n => {
            let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: IfThenElse
            IfThenElse(handle_lift7)
          },
          9n => {
            let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: LetIn
            LetIn(handle_lift8)
          },
          10n => {
            let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: ListNode
            List(handle_lift9)
          },
          11n => {
            let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: Path
            Path(handle_lift10)
          },
          12n => {
            let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: NixString
            String(handle_lift11)
          },
          13n => {
            Literal(match (WasmI32.load8U(base, 8n)) {
              0n => {
                Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(base, 16n))): Float64)
              },
              1n => {
                Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(base, 16n))): Int64)
              },
              _ => {
                Uri
              },
            })
          },
          14n => {
            let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: UnaryOperation
            UnaryOperation(handle_lift12)
          },
          15n => {
            let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: NixWith
            With(handle_lift13)
          },
          16n => {
            let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: Root
            Root(handle_lift14)
          },
          _ => {
            let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 8n))),}: AttributeSet
            AttributeSet(handle_lift15)
          },
        }, ...result_list_lift]
      }
      result_list_lift
    }

  }

  provide module Path {
    @externalName("[method]path.get-parts")
    foreign wasm wit_bindgen_methodPath_getParts: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getParts: (Path) => String = (self) => {
      wit_bindgen_methodPath_getParts(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      let len_string_lift = WasmI32.load(_RET_AREA, 4n)
      let str_string_lift = DataStructures.allocateString(len_string_lift)
      Memory.copy(WasmI32.(+)(str_string_lift, 8n), WasmI32.load(_RET_AREA, 0n), len_string_lift)
      let str_string_lift = WasmI32.toGrain(str_string_lift): String
      str_string_lift
    }

  }

  provide module NixString {
    @externalName("[method]nix-string.get-parts")
    foreign wasm wit_bindgen_methodNixString_getParts: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getParts: (NixString) => List<StringPart> = (self) => {
      wit_bindgen_methodNixString_getParts(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      let base_list_lift = WasmI32.load(_RET_AREA, 0n)
      let len_list_lift = WasmI32.load(_RET_AREA, 4n)
      let mut result_list_lift = []
      Memory.incRef(WasmI32.fromGrain(result_list_lift))
      for (let mut i = WasmI32.(-)(len_list_lift, 1n); WasmI32.(!=)(i, -1n); i = WasmI32.(-)(i, 1n)) {
        let base = WasmI32.(+)(base_list_lift, WasmI32.(*)(i, 32n))
        result_list_lift = [match (WasmI32.load8U(base, 0n)) {
          0n => {
            let len_string_lift = WasmI32.load(base, 12n)
            let str_string_lift = DataStructures.allocateString(len_string_lift)
            Memory.copy(WasmI32.(+)(str_string_lift, 8n), WasmI32.load(base, 8n), len_string_lift)
            let str_string_lift = WasmI32.toGrain(str_string_lift): String
            Raw(str_string_lift)
          },
          _ => {
            Dynamic(match (WasmI32.load8U(base, 8n)) {
              0n => {
                let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Select
                Select(handle_lift)
              },
              1n => {
                let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Assert
                Assert(handle_lift0)
              },
              2n => {
                let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: BinaryOperation
                BinaryOperation(handle_lift1)
              },
              3n => {
                let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Error
                Error(handle_lift2)
              },
              4n => {
                let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Function
                Function(handle_lift3)
              },
              5n => {
                let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: FunctionApplication
                FunctionApplication(handle_lift4)
              },
              6n => {
                let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: HasAttribute
                HasAttribute(handle_lift5)
              },
              7n => {
                let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Identifier
                Identifier(handle_lift6)
              },
              8n => {
                let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: IfThenElse
                IfThenElse(handle_lift7)
              },
              9n => {
                let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: LetIn
                LetIn(handle_lift8)
              },
              10n => {
                let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: ListNode
                List(handle_lift9)
              },
              11n => {
                let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Path
                Path(handle_lift10)
              },
              12n => {
                let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: NixString
                String(handle_lift11)
              },
              13n => {
                Literal(match (WasmI32.load8U(base, 16n)) {
                  0n => {
                    Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(base, 24n))): Float64)
                  },
                  1n => {
                    Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(base, 24n))): Int64)
                  },
                  _ => {
                    Uri
                  },
                })
              },
              14n => {
                let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: UnaryOperation
                UnaryOperation(handle_lift12)
              },
              15n => {
                let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: NixWith
                With(handle_lift13)
              },
              16n => {
                let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: Root
                Root(handle_lift14)
              },
              _ => {
                let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 16n))),}: AttributeSet
                AttributeSet(handle_lift15)
              },
            })
          },
        }, ...result_list_lift]
      }
      result_list_lift
    }

  }

  provide module UnaryOperation {
    @externalName("[method]unary-operation.get-operator")
    foreign wasm wit_bindgen_methodUnaryOperation_getOperator: (WasmI32) => WasmI32 from "spotandjake:snow/nix"

    @unsafe
    provide let getOperator: (UnaryOperation) => UnaryOperator = (self) => {
      let ret = wit_bindgen_methodUnaryOperation_getOperator(WasmI32.load(WasmI32.fromGrain(self.handle), 4n))
      match (ret) {
        0n => {
          Invert
        },
        _ => {
          Negate
        },
      }
    }


    @externalName("[method]unary-operation.get-operand")
    foreign wasm wit_bindgen_methodUnaryOperation_getOperand: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getOperand: (UnaryOperation) => Expression = (self) => {
      wit_bindgen_methodUnaryOperation_getOperand(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }

  }

  provide module NixWith {
    @externalName("[method]nix-with.get-body")
    foreign wasm wit_bindgen_methodNixWith_getBody: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getBody: (NixWith) => Expression = (self) => {
      wit_bindgen_methodNixWith_getBody(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }


    @externalName("[method]nix-with.get-namespace")
    foreign wasm wit_bindgen_methodNixWith_getNamespace: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getNamespace: (NixWith) => Expression = (self) => {
      wit_bindgen_methodNixWith_getNamespace(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }

  }

  provide module Root {
    @externalName("[method]root.get-expr")
    foreign wasm wit_bindgen_methodRoot_getExpr: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getExpr: (Root) => Expression = (self) => {
      wit_bindgen_methodRoot_getExpr(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      match (WasmI32.load8U(_RET_AREA, 0n)) {
        0n => {
          let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Select
          Select(handle_lift)
        },
        1n => {
          let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Assert
          Assert(handle_lift0)
        },
        2n => {
          let handle_lift1 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: BinaryOperation
          BinaryOperation(handle_lift1)
        },
        3n => {
          let handle_lift2 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Error
          Error(handle_lift2)
        },
        4n => {
          let handle_lift3 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Function
          Function(handle_lift3)
        },
        5n => {
          let handle_lift4 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: FunctionApplication
          FunctionApplication(handle_lift4)
        },
        6n => {
          let handle_lift5 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: HasAttribute
          HasAttribute(handle_lift5)
        },
        7n => {
          let handle_lift6 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Identifier
          Identifier(handle_lift6)
        },
        8n => {
          let handle_lift7 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: IfThenElse
          IfThenElse(handle_lift7)
        },
        9n => {
          let handle_lift8 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: LetIn
          LetIn(handle_lift8)
        },
        10n => {
          let handle_lift9 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: ListNode
          List(handle_lift9)
        },
        11n => {
          let handle_lift10 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Path
          Path(handle_lift10)
        },
        12n => {
          let handle_lift11 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixString
          String(handle_lift11)
        },
        13n => {
          Literal(match (WasmI32.load8U(_RET_AREA, 8n)) {
            0n => {
              Float(WasmI32.toGrain(DataStructures.newFloat64(WasmF64.load(_RET_AREA, 16n))): Float64)
            },
            1n => {
              Integer(WasmI32.toGrain(DataStructures.newInt64(WasmI64.load(_RET_AREA, 16n))): Int64)
            },
            _ => {
              Uri
            },
          })
        },
        14n => {
          let handle_lift12 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: UnaryOperation
          UnaryOperation(handle_lift12)
        },
        15n => {
          let handle_lift13 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: NixWith
          With(handle_lift13)
        },
        16n => {
          let handle_lift14 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: Root
          Root(handle_lift14)
        },
        _ => {
          let handle_lift15 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(_RET_AREA, 8n))),}: AttributeSet
          AttributeSet(handle_lift15)
        },
      }
    }

  }

  provide module AttributeSet {
    @externalName("[method]attribute-set.get-binds")
    foreign wasm wit_bindgen_methodAttributeSet_getBinds: (WasmI32, WasmI32) => Void from "spotandjake:snow/nix"

    @unsafe
    provide let getBinds: (AttributeSet) => List<Entry> = (self) => {
      wit_bindgen_methodAttributeSet_getBinds(WasmI32.load(WasmI32.fromGrain(self.handle), 4n), _RET_AREA)
      let base_list_lift = WasmI32.load(_RET_AREA, 0n)
      let len_list_lift = WasmI32.load(_RET_AREA, 4n)
      let mut result_list_lift = []
      Memory.incRef(WasmI32.fromGrain(result_list_lift))
      for (let mut i = WasmI32.(-)(len_list_lift, 1n); WasmI32.(!=)(i, -1n); i = WasmI32.(-)(i, 1n)) {
        let base = WasmI32.(+)(base_list_lift, WasmI32.(*)(i, 8n))
        result_list_lift = [match (WasmI32.load8U(base, 0n)) {
          0n => {
            let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 4n))),}: AttributePathValue
            AttributePathValue(handle_lift)
          },
          _ => {
            let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(WasmI32.load(base, 4n))),}: Inherit
            Inherit(handle_lift0)
          },
        }, ...result_list_lift]
      }
      result_list_lift
    }

  }
}

