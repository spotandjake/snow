module Snow

from "runtime/dataStructures" include DataStructures
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmi64" include WasmI64
from "runtime/unsafe/wasmf32" include WasmF32
from "runtime/unsafe/wasmf64" include WasmF64
from "runtime/unsafe/memory" include Memory
from "int32" include Int32
from "int64" include Int64
from "char" include Char
from "list" include List

@unsafe
let _RET_AREA = Memory.malloc(8n)

@unsafe
provide let cabi_realloc = (originalPtr: WasmI32, originalSize: WasmI32, alignment: WasmI32, newSize: WasmI32) => {
  if (WasmI32.eqz(originalPtr)) {
    Memory.malloc(newSize)
  } else {
    let newPtr = Memory.malloc(newSize)
    let amt = if (WasmI32.(<)(originalSize, newSize)) originalSize else newSize
    Memory.copy(newPtr, originalPtr, amt)
    Memory.free(originalPtr)
    newPtr
  }
}

provide record Resource<a> {
  mut handle: Int32,
  rep: a
}

provide record NixParse {
  handle: Int32
}


provide module Host {

  @externalName("read-file")
  foreign wasm wit_bindgen_readFile: (WasmI32, WasmI32, WasmI32) => Void from "snow:host/host@0.0.1"

  @unsafe
  provide let readFile: (String) => String = (path) => {
    let vec_list_canon_lower = path
    let ptr_list_canon_lower = WasmI32.(+)(WasmI32.fromGrain(vec_list_canon_lower), 8n)
    let len_list_canon_lower = WasmI32.load(WasmI32.fromGrain(vec_list_canon_lower), 4n)
    wit_bindgen_readFile(ptr_list_canon_lower, len_list_canon_lower, _RET_AREA)
    let len_string_lift = WasmI32.load(_RET_AREA, 4n)
    let str_string_lift = DataStructures.allocateString(len_string_lift)
    Memory.copy(WasmI32.(+)(str_string_lift, 8n), WasmI32.load(_RET_AREA, 0n), len_string_lift)
    let str_string_lift = WasmI32.toGrain(str_string_lift): String
    str_string_lift
  }


  @externalName("parse-nix")
  foreign wasm wit_bindgen_parseNix: (WasmI32, WasmI32) => WasmI32 from "snow:host/host@0.0.1"

  @unsafe
  provide let parseNix: (String) => NixParse = (code) => {
    let vec_list_canon_lower = code
    let ptr_list_canon_lower = WasmI32.(+)(WasmI32.fromGrain(vec_list_canon_lower), 8n)
    let len_list_canon_lower = WasmI32.load(WasmI32.fromGrain(vec_list_canon_lower), 4n)
    let ret = wit_bindgen_parseNix(ptr_list_canon_lower, len_list_canon_lower)
    let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(ret)),}: NixParse
    handle_lift
  }


  provide module NixParse {}
}

