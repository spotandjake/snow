/*
 * MIT License
 *
 * Copyright (c) 2024 Spotandjake
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Source: https://github.com/spotandjake/Reaper
*/
module Reaper

from "map" include Map
from "set" include Set
from "array" include Array
from "list" include List
from "char" include Char
from "string" include String
from "number" include Number

// TODO: It would be better to use Map.{ module Immutable as Map } and use Set.{ module Immutable as Set } but until #2197 on the grain repo is fixed it crashes the lsp
let mapGet = Map.Immutable.get
let mapSet = Map.Immutable.set

/**
 * Represents an error that occurred while parsing arguments.
 *
 * @since v0.1.0
 */
provide enum ReaperError {
  /**
   * The given argument was expected to be a boolean.
   */
  ExpectedBoolean(String),
  /**
   * The given argument was expected to be a number.
   */
  ExpectedNumber(String),
  /**
   * The given argument was expected to be an integer.
   */
  ExpectedInteger(String),
  /**
   * The given argument was expected to be a string.
   */
  ExpectedString(String),
  /**
   * An unknown argument was given.
   */
  UnknownArgument(String),
}

/**
 * Represents an argument that was parsed.
 *
 * @since v0.1.0
 */
provide enum Argument {
  /**
   * Represents an argument that was present.
   */
  ReaperVoid,
  /**
   * Represents an argument that was a string.
   */
  ReaperString(String),
  /**
   * Represents an argument that was a boolean.
   */
  ReaperBool(Bool),
  /**
   * Represents an argument that was a number.
   */
  ReaperNumber(Number),
  /**
   * Represents an argument that was an integer.
   */
  ReaperInt(Number),
  /**
   * Represents an argument that was multiple strings.
   */
  ReaperMulti(List<String>),
}

/**
 * Represents the options that were parsed from the arguments.
 *
 * @since v0.1.0
 */
provide record Options {
  /**
   * The complete list of options that were parsed.
   *
   * Useful for queries.
   */
  options: Map.Immutable.Map<String, Argument>,
  /**
   * The arguments that were parsed as presence arguments.
   */
  presence: Set.Immutable.Set<String>,
  /**
   * The arguments that were parsed as booleans.
   */
  bools: Map.Immutable.Map<String, Bool>,
  /**
   * The arguments that were parsed as numbers.
   */
  numbers: Map.Immutable.Map<String, Number>,
  /**
   * The arguments that were parsed as integers.
   */
  ints: Map.Immutable.Map<String, Number>,
  /**
   * The arguments that were parsed as strings.
   */
  strings: Map.Immutable.Map<String, String>,
  /**
   * The arguments that were parsed as multiple strings.
   */
  multi: Map.Immutable.Map<String, List<String>>,
  /**
   * The arguments that were not parsed.
   */
  rest: List<String>,
  /**
   * The arguments that were passed after `--`.
   */
  passedArgs: List<String>,
}

// Helpers
module Helpers {
  provide let getValue = items => {
    match (items) {
      [name, ...rest] when !String.startsWith("-", name) => Some((name, rest)),
      _ => None,
    }
  }
  provide let getBool = items => {
    match (getValue(items)) {
      Some(("true", rest)) => Some((true, rest)),
      Some(("false", rest)) => Some((false, rest)),
      _ => Some((true, items)),
    }
  }
  provide let getNumber = items => {
    match (getValue(items)) {
      None => None,
      Some((value, rest)) => {
        match (Number.parse(value)) {
          Err(_) => None,
          Ok(value) => Some((value, rest)),
        }
      },
    }
  }
  provide let getInt = items => {
    match (getValue(items)) {
      None => None,
      Some((value, rest)) => {
        match (Number.parseInt(value, radix=10)) {
          Err(_) => None,
          Ok(value) => Some((value, rest)),
        }
      },
    }
  }
}
use Helpers.*

let getArgumentType = (
  name,
  rest,
  (_, presence, bools, numbers, ints, strings, multi, _),
) => {
  if (Array.contains(name, presence)) {
    Ok((name, ReaperVoid, rest))
  } else if (Array.contains(name, bools)) {
    match (getBool(rest)) {
      None => Err(ExpectedBoolean(name)),
      Some((value, rest)) => Ok((name, ReaperBool(value), rest)),
    }
  } else if (Array.contains(name, numbers)) {
    match (getNumber(rest)) {
      None => Err(ExpectedNumber(name)),
      Some((value, rest)) => Ok((name, ReaperNumber(value), rest)),
    }
  } else if (Array.contains(name, ints)) {
    match (getInt(rest)) {
      None => Err(ExpectedInteger(name)),
      Some((value, rest)) => Ok((name, ReaperInt(value), rest)),
    }
  } else if (Array.contains(name, strings)) {
    match (getValue(rest)) {
      None => Err(ExpectedString(name)),
      Some((value, rest)) => Ok((name, ReaperString(value), rest)),
    }
  } else if (Array.contains(name, multi)) {
    match (getValue(rest)) {
      None => Err(ExpectedString(name)),
      Some((value, rest)) => Ok((name, ReaperMulti([value]), rest)),
    }
  } else {
    Err(UnknownArgument(name))
  }
}
let rec parseArg = (
  items,
  (aliases, presence, bools, numbers, ints, strings, multi, passArgs) as config,
  opts,
) => {
  match (items) {
    [] => Ok(opts),
    [rawName, ...rest] => {
      let name = Array.toList(String.explode(rawName))
      match (name) {
        ['-', '-'] when passArgs => Ok({ ...opts, passedArgs: rest }),
        ['-', '-'] => Err(UnknownArgument("-")),
        // Splits -abc into -a -b -c
        ['-', ...name] when String.length(rawName) != 2 &&
          !String.startsWith("--", rawName) => {
          parseArg(
            List.reduce(
              (acc, char) => ["-" ++ Char.toString(char), ...acc],
              rest,
              name
            ),
            config,
            opts
          )
        },
        ['-', '-', ...name] | ['-', ...name] => {
          // TODO: Support foo.bar syntax
          let name = Array.fromList(name)
          let (name, rest) = match (Array.findIndex(char => char == '=', name)) {
            None => (name, rest),
            Some(index) => {
              (
                Array.slice(0, end=index, name),
                [String.implode(Array.slice(index + 1, name)), ...rest],
              )
            },
          }
          let name = String.implode(name)
          let name = match (Array.find(((key, _)) => key == name, aliases)) {
            None => name,
            Some((_, name)) => name,
          }
          match (getArgumentType(name, rest, config)) {
            Ok(argumentType) => {
              let (rest, opts) = match (argumentType) {
                (name, ReaperVoid, rest) =>
                  (
                    rest,
                    {
                      ...opts,
                      options: mapSet(name, ReaperVoid, opts.options),
                      presence: Set.Immutable.add(name, opts.presence),
                    },
                  ),
                (name, ReaperBool(value), rest) =>
                  (
                    rest,
                    {
                      ...opts,
                      options: mapSet(name, ReaperBool(value), opts.options),
                      bools: mapSet(name, value, opts.bools),
                    },
                  ),
                (name, ReaperNumber(value), rest) =>
                  (
                    rest,
                    {
                      ...opts,
                      options: mapSet(name, ReaperNumber(value), opts.options),
                      numbers: mapSet(name, value, opts.numbers),
                    },
                  ),
                (name, ReaperInt(value), rest) =>
                  (
                    rest,
                    {
                      ...opts,
                      options: mapSet(name, ReaperInt(value), opts.options),
                      ints: mapSet(name, value, opts.ints),
                    },
                  ),
                (name, ReaperString(value), rest) =>
                  (
                    rest,
                    {
                      ...opts,
                      options: mapSet(name, ReaperString(value), opts.options),
                      strings: mapSet(name, value, opts.strings),
                    },
                  ),
                (name, ReaperMulti([value]), rest) => {
                  let values = match (mapGet(name, opts.multi)) {
                    Some(values) => [value, ...values],
                    None => [value],
                  }
                  (
                    rest,
                    {
                      ...opts,
                      options: mapSet(name, ReaperMulti(values), opts.options),
                      multi: mapSet(name, values, opts.multi),
                    },
                  )
                },
                (name, ReaperMulti(_), rest) =>
                  fail "Impossible: Directly Parsed ReaperMulti with multiple values",
              }
              parseArg(rest, config, opts)
            },
            Err(err) => Err(err),
          }
        },
        _ => parseArg(rest, config, { ...opts, rest: [rawName, ...opts.rest] }),
      }
    },
  }
}

/**
 * Parses the given arguments using the provided configuration.
 *
 * @param aliases: A list of aliases for the arguments
 * @param presence: A list of arguments that can be present
 * @param bools: A list of arguments that should be parsed as booleans
 * @param numbers: A list of arguments that should be parsed as numbers
 * @param ints: A list of arguments that should be parsed as integers
 * @param strings: A list of arguments that should be parsed as strings
 * @param multi: A list of arguments that should be parsed as multiple strings
 * @param defaults: A list of key-value pairs representing the default values for arguments
 * @param passArgs: Whether to skip arguments after `--`
 * @param args: The arguments to parse
 *
 * @returns `Ok(options)` where options is a record containing the parsed arguments, `Err(error)` otherwise
 *
 * @example Reaper.parse(aliases=[>("h", "help")], presence=[> "help" ], bools=[> "verbose"], [> "-h", "--verbose"])
 *
 * @since v0.1.0
 */
provide let parse = (
  aliases=[>],
  presence=[>],
  bools=[>],
  numbers=[>],
  ints=[>],
  strings=[>],
  multi=[>],
  defaults=[>],
  passArgs=true,
  args,
) => {
  // Fill our defaults
  let mut parsedResult = {
    options: Map.Immutable.empty,
    presence: Set.Immutable.empty,
    bools: Map.Immutable.empty,
    numbers: Map.Immutable.empty,
    ints: Map.Immutable.empty,
    strings: Map.Immutable.empty,
    multi: Map.Immutable.empty,
    rest: [],
    passedArgs: [],
  }
  // TODO: Array.reduce would be better here but #2197 on the grain repo prevents it
  for (let mut i = 0; i < Array.length(defaults); i += 1) {
    let (key, value) = defaults[i]
    if (!Map.Immutable.contains(key, parsedResult.options)) {
      match (value) {
        ReaperVoid => {
          parsedResult = {
            ...parsedResult,
            options: mapSet(key, ReaperVoid, parsedResult.options),
            presence: Set.Immutable.add(key, parsedResult.presence),
          }
        },
        ReaperBool(value) => {
          parsedResult = {
            ...parsedResult,
            options: mapSet(key, ReaperBool(value), parsedResult.options),
            bools: mapSet(key, value, parsedResult.bools),
          }
        },
        ReaperNumber(value) => {
          parsedResult = {
            ...parsedResult,
            options: mapSet(key, ReaperNumber(value), parsedResult.options),
            numbers: mapSet(key, value, parsedResult.numbers),
          }
        },
        ReaperInt(value) => {
          parsedResult = {
            ...parsedResult,
            options: mapSet(key, ReaperInt(value), parsedResult.options),
            ints: mapSet(key, value, parsedResult.ints),
          }
        },
        ReaperString(value) => {
          parsedResult = {
            ...parsedResult,
            options: mapSet(key, ReaperString(value), parsedResult.options),
            strings: mapSet(key, value, parsedResult.strings),
          }
        },
        ReaperMulti(value) => {
          parsedResult = {
            ...parsedResult,
            options: mapSet(key, ReaperMulti(value), parsedResult.options),
            multi: mapSet(key, value, parsedResult.multi),
          }
        },
      }
      parsedResult = {
        ...parsedResult,
        options: mapSet(key, value, parsedResult.options),
      }
    }
  }
  // Parse
  let opts = parseArg(
    Array.toList(args),
    (aliases, presence, bools, numbers, ints, strings, multi, passArgs),
    parsedResult
  )
  match (opts) {
    Ok(opts) => Ok({ ...opts, rest: List.reverse(opts.rest) }),
    Err(err) => Err(err),
  }
}

/**
 * Converts the given Reaper error into a string.
 *
 * @param err: The error to convert.
 *
 * @returns The error message.
 *
 * @example toStringError(UnknownArgument("foo")) == "Unexpected argument: foo"
 * @example toStringError(ExpectedBoolean("foo")) == "Expected a boolean value for argument: foo"
 *
 * @since v0.1.0
 */
provide let toStringError = err => {
  match (err) {
    ExpectedBoolean(name) => "Expected a boolean value for argument: " ++ name,
    ExpectedNumber(name) => "Expected a number value for argument: " ++ name,
    ExpectedInteger(name) => "Expected an integer value for argument: " ++ name,
    ExpectedString(name) => "Expected a string value for argument: " ++ name,
    UnknownArgument(name) => "Unexpected argument: " ++ name,
  }
}
