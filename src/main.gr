module Command

from "wasi/process" include Process
from "array" include Array
from "path" include Path
from "./libs/reaper.gr" include Reaper
from "./libs/snow.gr" include Snow

// Wit re-export
@unsafe
provide let cabi_realloc = (originalPtr, originalSize, alignment, newSize) => {
  Snow.cabi_realloc(originalPtr, originalSize, alignment, newSize)
}

// Helpers
// TODO: NixToSnow
let nixToSnow = () => {
  // Collect Files
  // For each entry
  // Parse Nix
  // Output Snow
  void
}
// TODO: SnowToNix
// TODO: Test
let getConvertList = (input, output, file_extension) => {
  // TODO: Take inputs
  match ((Path.isDirectory(input), Path.isDirectory(output))) {
    // (file, file) -> convertFile
    (false, false) => Ok([(input, output)]),
    // (file, folder) -> convertFile
    // TODO: Add the file to the output path
    (false, true) => Ok([(input, output)]),
    // (folder, file) -> error
    // TODO: Better error
    (true, false) => Err("error"),
    // (folder, folder) -> collect files, convert files
    // TODO: Collect Files
    (true, true) => Err("NIY"),
  }
}
// Program Entry
provide let run: () => Void = () => {
  // Get the command line arguments
  let args = match (Process.argv()) {
    // Trim the runner binary or file (Different per wasm runtime)
    Ok(args) => Array.slice(1, args),
    // Note: Most likely a wasi permissions error
    Err(_) => fail "Failed to read command line arguments",
  }
  // Parse the arguments
  let options = Reaper.parse(
    aliases=[> ("h", "help")],
    presence=[>],
    bools=[>],
    numbers=[>],
    ints=[>],
    strings=[>],
    multi=[>],
    args
  )
  // Print the parsed options
  match (options) {
    // Note: The arguments were parsed successfully
    Ok({ rest, _ }) => {
      // Match top level command
      match (rest) {
        ["nix2snow", input, output] => {
          print("nix2snow")
          print(input)
          print(output)
          // TODO: Move readFile back into grain
          let s = Snow.Host.readFile(input)
          let a = Snow.Host.parseNix(s)
          print(a)
          // TODO: Read Input
          // print(Snow.Host.parseNix(input))
        },
        ["snow2nix", input, output] => {
          print("snow2nix")
          print(input)
          print(output)
        },
        // TODO: Proper error for fail, and help
        ["help"] => {
          print("help")
        },
        _ => fail "Unknown command",
      }
    },
    // Note: An unknown argument was given
    Err(err) => fail Reaper.toStringError(err),
  }
  void
}
