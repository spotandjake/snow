module Nix

from "list" include List
from "./ast.gr" include Ast
from "../libs/snow.gr" include Snow

let convertUnaryOp = (unaryOp: Snow.UnaryOperator) => {
  match (unaryOp) {
    Invert => Ast.Not,
    Negate => Ast.Neg,
  }
}
let convertBinOp = (binOp: Snow.BinaryOperator) => {
  match (binOp) {
    Concat => Ast.Concat,
    Update => Ast.Update,
    Add => Ast.Add,
    Sub => Ast.Sub,
    Mul => Ast.Mul,
    Div => Ast.Div,
    And => Ast.And,
    Equal => Ast.Equal,
    Implication => Ast.Implication,
    Less => Ast.Less,
    LessOrEq => Ast.LessOrEq,
    More => Ast.More,
    MoreOrEq => Ast.MoreOrEq,
    NotEqual => Ast.NotEqual,
    Or => Ast.Or,
  }
}
let rec convertAttr = (attr: Snow.Attr) => {
  match (attr) {
    Ident(id) => Ast.IdentifierAttr(Snow.Nix.Identifier.getId(id)),
    Dynamic(expr) => Ast.DynamicAttr(convertExpr(expr)),
    Str(str) => Ast.StringAttr(str),
  }
}
and convertBinding = (binding: Snow.Entry) => {
  match (binding) {
    AttributePathValue(data) => {
      let path = Snow.Nix.AttributePathValue.getAttrList(data)
      let value = Snow.Nix.AttributePathValue.getExpr(data)
      Ast.AttributePathValue{
        path: List.map(convertAttr, path),
        value: convertExpr(value)
      }
    },
    Inherit(data) => {
      let fromExpr = match (Snow.Nix.Inherit.getExprFrom(data)) {
        Some(expr) => Some(convertExpr(expr)),
        None => None,
      }
      let attrs = Snow.Nix.Inherit.getAttrList(data)
      Ast.Inherit{ fromExpr, attrs: List.map(convertAttr, attrs) }
    },
  }
}
and convertExpr = (expr: Snow.Expression) => {
  // TODO: Ensure we are grabbing all the properties from the Nix AST
  match (expr) {
    Select(node) => {
      let base_expr = Snow.Nix.Select.getBaseExpr(node)
      let default_expr = Snow.Nix.Select.getDefaultExpr(node)
      Ast.SelectExpr{
        base: convertExpr(base_expr),
        default: match (default_expr) {
          Some(expr) => Some(convertExpr(expr)),
          None => None,
        }
      }
    },
    Assert(node) => {
      let expression = Snow.Nix.Assert.getExpr(node)
      let condition = Snow.Nix.Assert.getCondition(node)
      Ast.AssertExpr{
        expr: convertExpr(expression),
        cond: convertExpr(condition)
      }
    },
    BinaryOperation(node) => {
      let lhs = Snow.Nix.BinaryOperation.getLhs(node)
      let operator = Snow.Nix.BinaryOperation.getOperator(node)
      let rhs = Snow.Nix.BinaryOperation.getRhs(node)
      Ast.BinOpExpr{
        lhs: convertExpr(lhs),
        op: convertBinOp(operator),
        rhs: convertExpr(rhs)
      }
    },
    Error(e) => Ast.InvalidExpr(Snow.Nix.Error.getMessage(e)),
    Function(func) => {
      let body = Snow.Nix.Function.getBody(func)
      Ast.FunctionExpr{ body: convertExpr(body) }
    },
    FunctionApplication(funcApp) => {
      let func = Snow.Nix.FunctionApplication.getFunction(funcApp)
      Ast.FuncAppExpr{ func: convertExpr(func) }
    },
    HasAttribute(node) => {
      let expression = Snow.Nix.HasAttribute.getExpr(node)
      Ast.HasAttrExpr{ expr: convertExpr(expression) }
    },
    Identifier(id) => Ast.IdentifierExpr(Snow.Nix.Identifier.getId(id)),
    IfThenElse(node) => {
      let condition = Snow.Nix.IfThenElse.getCondition(node)
      let trueBranch = Snow.Nix.IfThenElse.getTrueBranch(node)
      let falseBranch = Snow.Nix.IfThenElse.getFalseBranch(node)
      Ast.IfThenElseExpr{
        cond: convertExpr(condition),
        trueBranch: convertExpr(trueBranch),
        falseBranch: convertExpr(falseBranch)
      }
    },
    LetIn(node) => {
      let binds = Snow.Nix.LetIn.getBinds(node)
      let body = Snow.Nix.LetIn.getBody(node)
      Ast.LetInExpr{
        bindings: List.map(convertBinding, binds),
        body: convertExpr(body)
      }
    },
    List(node) => {
      let elements = Snow.Nix.ListNode.getElements(node)
      Ast.ListExpr(List.map(convertExpr, elements))
    },
    // TODO: Path and String
    Path(node) => fail "Path not implemented convertExpr",
    String(node) => {
      let parts = Snow.Nix.NixString.getParts(node)
      let parts = List.map((part: Snow.StringPart) => {
        match (part) {
          Raw(str) => Ast.Raw(str),
          Dynamic(expr) => Ast.Dynamic(convertExpr(expr)),
        }
      }, parts)
      Ast.StringExpr(parts)
    },
    Literal(lit) => {
      match (lit) {
        Float(data) => Ast.LiteralExpr(Ast.FloatVal(data)),
        Integer(data) => Ast.LiteralExpr(Ast.IntVal(data)),
        Uri => Ast.LiteralExpr(Ast.UriVal),
      }
    },
    UnaryOperation(node) => {
      let op = Snow.Nix.UnaryOperation.getOperator(node)
      let rhs = Snow.Nix.UnaryOperation.getOperand(node)
      Ast.UnaryOpExpr{
        op: convertUnaryOp(op),
        rhs: convertExpr(rhs)
      }
    },
    With(node) => {
      let body = Snow.Nix.NixWith.getBody(node)
      let namespace = Snow.Nix.NixWith.getNamespace(node)
      Ast.WithExpr{ body: convertExpr(body), namespace: convertExpr(namespace) }
    },
    Root(node) => {
      let expression = Snow.Nix.Root.getExpr(node)
      Ast.RootExpr(convertExpr(expression))
    },
    AttributeSet(node) => {
      let binds = Snow.Nix.AttributeSet.getBinds(node)
      Ast.AttrSetExpr(List.map(convertBinding, binds))
    },
  }
}
provide let convertAst = (nixAst: Snow.Expression) => {
  convertExpr(nixAst)
}
